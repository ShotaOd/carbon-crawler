version = '0.1.0'

bootJar.enabled = false
jar.enabled = false

subprojects {
    group = 'org.carbon.crawler.stream.flow'

    sourceSets {
        def coreResource = project(':carbon-crawler-stream:core').sourceSets.main.resources.srcDirs
        main.resources.srcDir coreResource
        test.resources.srcDir coreResource
    }
    println("""> Convention: additional resource @[module: $name]
    main: $sourceSets.main.resources.srcDirs
    test: $sourceSets.test.resources.srcDirs""")

    // in runtime stream, prefer to use system property passed by deployer
    // https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config
    bootJar {
        exclude "**/application*.yml", "**/bootstrap*.yml"
    }

    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-stream'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'

        implementation "org.carbon.libs:carbon-kompose:$versions.carbon.kompose"
        implementation project(':carbon-crawler-stream:core')
        implementation project(':carbon-crawler-stream:message')
    }

    // https://github.com/spring-projects/spring-boot/issues/13187
    task bootInstall(group: 'application', type: Upload) {
        configuration = project.configurations.bootArchives
        // Install to the local Maven repository
        repositories.mavenInstaller()
        // It's a fat jar. Clear the scope mappings so that the pom has no dependencies
        //noinspection GroovyAssignabilityCheck
        repositories.withType(MavenResolver.class) { resolver ->
            resolver.pom.scopeMappings.mappings.clear()
        }
    }
}
