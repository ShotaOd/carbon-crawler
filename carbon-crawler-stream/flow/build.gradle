import java.nio.file.Files
import java.nio.file.Paths

version = '0.1.0'

bootJar.enabled = false
jar.enabled = false

subprojects {
    group = 'org.carbon.crawler.stream.flow'

    sourceSets {
        def coreResource = project(':carbon-crawler-stream:core').sourceSets.main.resources.srcDirs
        main.resources.srcDir coreResource
        test.resources.srcDir coreResource
    }
    println("""> Convention: additional resource @[module: $name]
    main: $sourceSets.main.resources.srcDirs
    test: $sourceSets.test.resources.srcDirs""")

    // in runtime stream, prefer to use system property passed by deployer
    // https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config
    bootJar {
        exclude "**/application*.yml"
    }

    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-stream'
        implementation project(':carbon-composer')
        implementation project(':carbon-crawler-stream:core')
        implementation project(':carbon-crawler-stream:message')
        testImplementation project(':carbon-crawler-stream:test')
    }

    // https://github.com/spring-projects/spring-boot/issues/13187
    task bootInstall(group: 'application', type: Upload) {
        configuration = project.configurations.bootArchives
        // Install to the local Maven repository
        repositories.mavenInstaller()
        // It's a fat jar. Clear the scope mappings so that the pom has no dependencies
        //noinspection GroovyAssignabilityCheck
        repositories.withType(MavenResolver.class) { resolver ->
            resolver.pom.scopeMappings.mappings.clear()
        }
    }
}

task printFlowProperties {
    doLast {
        def filePath = hasProperty("propertyDist") ? Paths.get(propertyDist) : Paths.get(project.buildDir.toString(), 'crawl-stream-apps')
        Files.deleteIfExists(filePath)
        Files.createFile(filePath)

        println '--------------------------------------------------'
        println 'export stream apps ...'
        println '--------------------------------------------------'
        def lines = subprojects.collect {
            def group = it.group
            def version = it.version
            def type = ''
            def name = it.name
            if (name.endsWith('sink')) {
                type = 'sink'
            } else if (name.endsWith('source')) {
                type = 'source'
            }
            def mavenRepoPath = "maven://$group:${name}:$version"
            println mavenRepoPath
            "$type.$name=$mavenRepoPath"
        }

        Files.write(filePath, lines)
        println "writing at $filePath"
    }
}
