buildscript {
    ext {
        kotlinVersion = '1.2.51'
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
    }
}

allprojects {

    group = 'org.carbon.crawler'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'http://kotlin.bintray.com/ktor'
        }
        maven {
            url 'https://dl.bintray.com/kotlin/exposed'
        }
        maven {
            url 'http://repo.spring.io/libs-release'
        }
        maven {
            url 'https://repo.spring.io/libs-milestone'
        }
    }
}

ext {
    versions = ext {
        kotlin = '1.2.51'
        exposed = '0.10.4'
        ktor = '0.9.1'

        springCloud = 'Finchley.SR1'
        springCloudStream = 'Fishtown.M1'
        kafkaBinder = '2.0.1.RELEASE'

        selenium = '3.13.0'
        nanoHttpd = '2.3.1'

        tomcat = '9.0.10'
        mysql = '8.0.11'
        h2 = '1.4.197'
        flyway = '5.1.4'

        mockk = '1.8.6'

        jackson = '2.9.6'
    }
    boms = ext {
        rdb = {
            it.implementation project(':carbon-crawler-model')
            it.implementation 'org.springframework.boot:spring-boot-starter-jdbc'
            it.implementation "org.jetbrains.exposed:exposed:$versions.exposed"
            it.implementation "org.apache.tomcat:tomcat-jdbc:$versions.tomcat"
            it.implementation "mysql:mysql-connector-java:$versions.mysql"
            it.testImplementation "com.h2database:h2:$versions.h2"
        }
        webdriver = {
            it.implementation "org.seleniumhq.selenium:selenium-java:$versions.selenium"
            it.implementation "org.seleniumhq.selenium:selenium-chrome-driver:$versions.selenium"
            it.testImplementation "org.nanohttpd:nanohttpd:$versions.nanoHttpd"
        }
    }
}

subprojects {

    apply plugin: 'kotlin'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'kotlin-spring'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8

    sourceSets {
        main {
            kotlin {
                srcDirs += 'src/main/kotlin'
            }
        }
        test {
            kotlin {
                srcDirs += 'src/tet/kotlin'
            }
        }
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    // code coverage
    jacocoTestReport {
        additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
        additionalClassDirs = files(subprojects.sourceSets.main.output)
        onlyIf { true }
    }

    dependencies {
        kapt 'org.springframework.boot:spring-boot-configuration-processor'

        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlin"
        implementation "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"

        runtime 'org.springframework.boot:spring-boot-devtools'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    bootRun {
        environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "local"
    }
}

task Hoge() {
    println(subprojects.sourceSets.main.allSource)
}
